ReplicaSets jest nową wersją Replication Controllers (27 i 28)

Replication Controllers tworzy wiele instancji Poda co okrśla się w sekcji spec w pliku yaml
-------------------
apiVersion: v1
kind: ReplicationControllers 
metadata: -> Replication Controllers 
  name: postgres 
  labels:
    app: postgres
    type: front-end
spec: -> Replication Controllers 
  template:
    metadata: -> Pod
      name: postgres 
      labels:
        app: postgres
        type: front-end
    spec: -> Pod
      containers:
      - name: postgres
        image: postgres
  replicas: 3 -> uruchomi 3 repliki
--------------
kubectl create -f repl_contr.yaml
kubectl get replicationcontroller  -> wyświetla wszystkie Replication Controllers 
kubectl get pods -> wyświetla wszystkie 3 pody

ReplicaSets
selector w template to głowna różnica pomiedzy replicaset a replicationconroller

--------------
apiVersion: apps/v1 -> inna nazwa niż w przypadku zwykłego poda
kind: ReplicaSet
metadata:
  name: myapp-replicaset
  labels:
    app: myapp
    type: front-end
spec:
  template:
    metadata:
      name: myapp-pod 
      labels:
        app: myapp
        type: front-end
    spec:
      containers:
      - name: myapp-replicaset
        image: myapp
  replicas: 3
  selector: -> indentyfikowanie podów, konieczny dla utworzenia replicaset
    matchLabels:
      type: front-end
--------------
kubectl create -f repl_setr.yaml
kubectl get replicaset  -> wyświetla wszystkie ReplicaSet
kubectl get pods -> wyświetla wszystkie 3 pody

jak zmienić replicas: 3 na replicas: 6, mamy kilka sposobów na to:
kubectl replace -f repl_setr.yaml
kubectl scale --replicas=6 -f repl_setr.yaml
kubectl scale --replicas=6 replicaset myapp-replicaset -f repl_setr.yaml
-> replicaset to typ a myapp-replicaset to name 

usuwanie:
kubectl delete replicaset myapp-replicaset -> usuwa rozniez podległe pody
---------
kubectl get pods
-> 3 działające pody
kubectl delete pod myapp-replicaset-hdy57
kubectl get pods
-> wciąż są 3 działające pody bo replicaset po usunięciu utworzył brakujacy 1 pod

kubectl describe replicaset myapp-replicaset
w sekcji Events widać już 4 pody
Case 2:
jeśli utworzymy nowy pod z nową templatką bez replicaset ale z tą samą nazwą Kubernetes usunie go bo w poprzednim template
mamy wyznaczone jedynie 3 pody które mają powstać

---------
zmiana replicas z 3 na 4
kubectl edit replicaset myapp-replicaset
system przekieruje nas do edycji zapamietanego przez Kubernetesa obrazu pliku i pozwoli na edycję 
kubectl get pods
-> 4 działające pody

inna opcja edycji:
kubectl scale replicaset myapp-replicaset --replicas=2
kubectl get pods
-> 2 działające pody
